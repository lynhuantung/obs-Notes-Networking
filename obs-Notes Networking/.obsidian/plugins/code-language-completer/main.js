/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CodeBlockInserterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  lastUsedLanguage: "",
  additionalLanguages: ""
};
var CodeBlockInserterPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.suggester = new LanguageSuggester(this);
    this.registerEditorSuggest(this.suggester);
    this.addCommand({
      id: "insert-code-block-custom",
      name: "Insert code block",
      editorCallback: (editor, view) => {
        const cursor = editor.getCursor();
        editor.replaceRange("```\n\n```", cursor);
        editor.setCursor({
          line: cursor.line,
          ch: cursor.ch + 3
        });
      }
    });
    this.addSettingTab(new CodeBlockInserterSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var LanguageSuggester = class extends import_obsidian.EditorSuggest {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
    this.languages = [];
    this.updateLanguages();
  }
  updateLanguages() {
    const baseLanguages = [
      "javascript",
      "python",
      "java",
      "c",
      "cpp",
      "csharp",
      "ruby",
      "go",
      "rust",
      "swift",
      "kotlin",
      "php",
      "html",
      "css",
      "sql",
      "bash",
      "powershell",
      "markdown",
      "json",
      "yaml",
      "xml",
      "typescript",
      "ocaml"
    ];
    const additionalLanguages = this.plugin.settings.additionalLanguages.split(",").map((lang) => lang.trim()).filter((lang) => lang.length > 0);
    this.languages = Array.from(
      /* @__PURE__ */ new Set([...additionalLanguages, ...baseLanguages])
    );
  }
  onTrigger(cursor, editor, file) {
    const line = editor.getLine(cursor.line);
    const match = line.match(/```(\w*)$/);
    if (match) {
      return {
        start: { line: cursor.line, ch: cursor.ch - match[1].length },
        end: cursor,
        query: match[1]
      };
    }
    return null;
  }
  getSuggestions(context) {
    const query = context.query.toLowerCase();
    let suggestions = this.languages.filter(
      (lang) => lang.startsWith(query)
    );
    const lastUsedLanguage = this.plugin.settings.lastUsedLanguage;
    if (lastUsedLanguage && lastUsedLanguage.startsWith(query) && suggestions.includes(lastUsedLanguage)) {
      suggestions = [
        lastUsedLanguage,
        ...suggestions.filter((lang) => lang !== lastUsedLanguage)
      ];
    }
    return suggestions;
  }
  renderSuggestion(lang, el) {
    el.setText(lang);
  }
  selectSuggestion(lang, evt) {
    const { editor, start, end } = this.context;
    editor.replaceRange(lang, start, end);
    this.plugin.settings.lastUsedLanguage = lang;
    this.plugin.saveSettings();
    const newCursorPos = {
      line: end.line + 1,
      ch: 0
    };
    editor.setCursor(newCursorPos);
  }
};
var CodeBlockInserterSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Last used language").setDesc("The last programming language you used in a code block.").addText(
      (text) => text.setPlaceholder("No language selected yet").setValue(this.plugin.settings.lastUsedLanguage).onChange(async (value) => {
        this.plugin.settings.lastUsedLanguage = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Additional languages").setDesc("Add more languages (comma-separated).").addTextArea(
      (text) => text.setPlaceholder("e.g., ruby, lang1, lang2").setValue(this.plugin.settings.additionalLanguages).onChange(async (value) => {
        this.plugin.settings.additionalLanguages = value;
        await this.plugin.saveSettings();
        this.plugin.suggester.updateLanguages();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Reset last used language").setDesc("Clear the last used language.").addButton(
      (button) => button.setButtonText("Reset").onClick(async () => {
        this.plugin.settings.lastUsedLanguage = "";
        await this.plugin.saveSettings();
        this.display();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
